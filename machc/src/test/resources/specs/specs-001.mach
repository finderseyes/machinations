/**
Test aspects:
- Graph declaration, with non-node field and methods.
- Primitive type declaration: integer, float, random dice, boolean and string.
*/

graph a {
    let _int = 10;
    let _float = 1.5;
    let _float_as_percentage = 10%;
    let _dice = 2D10;
    let _draw = draw2;
}

graph b {
    let _boolean = true;
    let _string = "hello Mach";
}

graph c {
    let a_0 = 1;
    let a_1 = a_0 + 2;
    let a_2 = a_1 + foo();

    // Evaluate to a set descriptor, instead of a set.
    // NOTE: local variables and dynamic-typed fields (those declared by 'let' keyword) can only
    // store a set descriptor, but not a set.
    // The difference between a set descriptor and a set is that a set actually instantiates all elements of its type,
    // while a set descriptor only stores a summary of how many items are there of a given element type in a set.
    //
    // We design it this way so that in graphical instructions, as a set descriptor is sufficient to instruct the
    // machine about the resource flow, constructing a descriptor is way faster than constructing a set.
    let a_3 = {1 +4, foo() gold};

    function foo() { return bar() + 6; }

    function bar() { return 4; }
}